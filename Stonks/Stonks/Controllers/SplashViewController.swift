//
//  SplashViewController.swift
//  Stonks
//
//  Created by –¢–∏–º—É—Ä –¢–∞–π–º–∞—Å–æ–≤ on 03.09.2021.
//

import UIKit
import Network

/*
 –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–æ–≥–æ—Ç–∏–ø, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Å—Ç—Ä–æ–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞. –°–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω –±—É–¥–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –Ω–µ–±–æ–ª—å—à–æ–≥–æ –¥–µ–ª–µ—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–∫–∏–ø–Ω—É—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é, —Å–≤–∞–π–ø–Ω—É–≤ –ø–æ —ç–∫—Ä–∞–Ω—É –≤–ª–µ–≤–æ, —Ç–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–µ—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Ä–∞–Ω—É.
 –ü–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –≤—Å–ø–ª—ã–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
 */

final class SplashViewController: UIViewController {

    // MARK: - Private Properties
    
    @IBOutlet weak fileprivate var titleLabel: UILabel!
    @IBOutlet weak fileprivate var didYouKnowLabel: UILabel!
    @IBOutlet weak fileprivate var factsLabel: UILabel!
    @IBOutlet weak fileprivate var tipLabel: UILabel!
    
    private var typewriterTask: DispatchWorkItem?
    private var userSeenTheTip = false
    
    let monitor = NWPathMonitor()
    
    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        tipLabel.alpha = 0.0
        
        setupGestureRecognizer()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        
        checkIfUserSeenTheTip()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(true)
        
        factsLabel.text = SomeFacts.facts.randomElement()
        
        startMonitoringInternetConnection()
        animateNewsLabel()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(true)
        
        stopMonitoringInternetConnection()
    }
    
    // MARK: - Private Methods
    
    /// –ú–µ—Ç–æ–¥, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    private func checkIfUserSeenTheTip() {
        userSeenTheTip = UserDefaults.standard.bool(forKey: "usedTip")
        if !userSeenTheTip {
            showTheTip()
        }
    }
    
    /// –ú–µ—Ç–æ–¥, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –ø–æ–¥—Å–∫–∞–∑–∫—É, –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–µ –Ω–µ –≤–∏–¥–µ–ª
    private func showTheTip() {
        UIView.animate(
            withDuration: 0.3,
            delay: 0.5,
            animations: { [weak self] in
                self?.tipLabel.alpha = 1.0
            },
            completion: nil)
    }
    
    /// –ú–µ—Ç–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π –∑–∞–¥–∞—á—É –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª–µ–π–±–ª–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    private func animateNewsLabel() {
        typewriterTask = factsLabel.setTextWithTypeAnimation(
            typedText: factsLabel.text ?? "No facts today ü§∑",
            characterDelay: 7) { [weak self] in
            
            self?.segueToStocks(delayedFor: 2)
        }
        
        if let task = typewriterTask {
            let queue = DispatchQueue(label: "newsLabelTyping",
                                      qos: DispatchQoS.userInteractive)
            queue.asyncAfter(deadline: .now() + 0.05, execute: task)
        }
    }
}

// MARK: - Segue Methods

extension SplashViewController {
    
    /// –ú–µ—Ç–æ–¥, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω Stocks
    private func segueToStocks() {
        // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∏–ø–Ω—É–ª –∞–Ω–∏–º–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω, –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        typewriterTask?.cancel()
        performSegue(withIdentifier: Segues.toStocks, sender: self)
    }
    
    // –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    private func segueToStocks(delayedFor delay: Int) {
        DispatchQueue.main.asyncAfter(deadline: .now() +
                                        DispatchTimeInterval.seconds(delay)) { [weak self] in
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞
            guard let task = self?.typewriterTask, !task.isCancelled else { return }
            self?.performSegue(withIdentifier: Segues.toStocks, sender: self)
        }
    }
}

// MARK: - UIGestureRecognizer Methods

extension SplashViewController {
    
    /// –ú–µ—Ç–æ–¥, –¥–æ–±–∞–≤–ª—è—é—â–∏–π —Å—á–∏—Ç—ã–≤–∞—Ç–µ–ª—å –∂–µ—Å—Ç–æ–≤ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π view
    func setupGestureRecognizer() {
        let swipeLeft = UISwipeGestureRecognizer(target: self,
                                                 action: #selector(didSwipeLeft(_:)))
        swipeLeft.direction = .left
        self.view.addGestureRecognizer(swipeLeft)
    }
    
    /// –ú–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–≤–∞–π–ø–∞ –≤–ª–µ–≤–æ
    /// - Parameter sender: sender
    @objc private func didSwipeLeft(_ sender: UISwipeGestureRecognizer) {
        if !userSeenTheTip {
            UserDefaults.standard.set(true, forKey: "usedTip")
        }
        segueToStocks()
    }
}

// MARK: - Network connection Monitoring

extension SplashViewController {
    
    /// –ù–∞—á–∏–Ω–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    private func startMonitoringInternetConnection() {
        monitor.pathUpdateHandler = { [weak self] path in
            guard path.status == .satisfied else {
                DispatchQueue.main.async {
                    self?.typewriterTask?.cancel()
                    self?.alert(message: "–ê–≤—Ç–æ—Ä –Ω–µ —É—Å–ø–µ–ª —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ñ–ª–∞–π–Ω–µ, –ø–æ—ç—Ç–æ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", title: "üö´üì∂ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç—é-—Ç—é üò¢")
                }
                self?.monitor.cancel()
                return
            }
        }
        
        let queue = DispatchQueue(label: "Network Monitor",
                                  qos: .utility)
        monitor.start(queue: queue)
    }
    
    /// –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    private func stopMonitoringInternetConnection() {
        monitor.cancel()
    }
}
